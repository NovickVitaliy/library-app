// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrderAndInventory.DAL.Database;

#nullable disable

namespace OrderAndInventory.DAL.Database.Migrations
{
    [DbContext(typeof(OrderAndInventoryDbContext))]
    partial class OrderAndInventoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrderAndInventory.DAL.Models.Inventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("inventory_id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("integer")
                        .HasColumnName("reorder_level");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.HasKey("InventoryId")
                        .HasName("pk_inventories");

                    b.ToTable("inventories", null, t =>
                        {
                            t.HasCheckConstraint("chk_inventories_reorder_level_greater_than_zero", "reorder_level > 0");

                            t.HasCheckConstraint("chk_inventories_stock_quantity_greater_than_zero", "stock_quantity > 0");
                        });

                    b.HasData(
                        new
                        {
                            InventoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            BookId = new Guid("21111111-1111-1111-1111-111111111111"),
                            ReorderLevel = 20,
                            StockQuantity = 100
                        },
                        new
                        {
                            InventoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            BookId = new Guid("32222222-2222-2222-2222-222222222222"),
                            ReorderLevel = 15,
                            StockQuantity = 50
                        },
                        new
                        {
                            InventoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            BookId = new Guid("43333333-3333-3333-3333-333333333333"),
                            ReorderLevel = 25,
                            StockQuantity = 75
                        },
                        new
                        {
                            InventoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            BookId = new Guid("54444444-4444-4444-4444-444444444444"),
                            ReorderLevel = 10,
                            StockQuantity = 30
                        },
                        new
                        {
                            InventoryId = new Guid("55555555-5555-5555-5555-555555555555"),
                            BookId = new Guid("65555555-5555-5555-5555-555555555555"),
                            ReorderLevel = 50,
                            StockQuantity = 200
                        });
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.Member", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("phone_number");

                    b.HasKey("MemberId")
                        .HasName("pk_members");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_members_email");

                    b.ToTable("members", (string)null);

                    b.HasData(
                        new
                        {
                            MemberId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "(555) 123-4567"
                        },
                        new
                        {
                            MemberId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "(555) 234-5678"
                        },
                        new
                        {
                            MemberId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            PhoneNumber = "(555) 345-6789"
                        },
                        new
                        {
                            MemberId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Email = "bob.williams@example.com",
                            FirstName = "Bob",
                            LastName = "Williams",
                            PhoneNumber = "(555) 456-7890"
                        },
                        new
                        {
                            MemberId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Email = "emma.brown@example.com",
                            FirstName = "Emma",
                            LastName = "Brown",
                            PhoneNumber = "(555) 567-8901"
                        });
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("OrderId")
                        .HasName("pk_orders");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_orders_member_id");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasCheckConstraint("chk_orders_order_date_not_future", "order_date <= NOW()");
                        });
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("order_item_id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.HasKey("OrderItemId")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.ToTable("order_items", null, t =>
                        {
                            t.HasCheckConstraint("chk_order_items_quantity_greater_than_zero", "quantity > 0");

                            t.HasCheckConstraint("chk_order_items_unit_price_greater_than_zero", "unit_price > 0");
                        });
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTimeOffset>("PaidDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.HasKey("PaymentId")
                        .HasName("pk_payments");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_payments_order_id");

                    b.ToTable("payments", null, t =>
                        {
                            t.HasCheckConstraint("chk_payments_amount_greater_than_zero", "amount > 0");

                            t.HasCheckConstraint("chk_payments_paid_date_not_future", "paid_date <= Now()");
                        });
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.Staff", b =>
                {
                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.HasKey("StaffId")
                        .HasName("pk_staves");

                    b.ToTable("staves", (string)null);
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.StaffOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.HasKey("OrderId", "StaffId")
                        .HasName("pk_staff_orders");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_staff_orders_staff_id");

                    b.ToTable("staff_orders", (string)null);
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.Order", b =>
                {
                    b.HasOne("OrderAndInventory.DAL.Models.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_members_member_id");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.OrderItem", b =>
                {
                    b.HasOne("OrderAndInventory.DAL.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.Payment", b =>
                {
                    b.HasOne("OrderAndInventory.DAL.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.StaffOrder", b =>
                {
                    b.HasOne("OrderAndInventory.DAL.Models.Order", "Order")
                        .WithMany("StaffOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_staff_orders_orders_order_id");

                    b.HasOne("OrderAndInventory.DAL.Models.Staff", "Staff")
                        .WithMany("StaffOrders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_staff_orders_staves_staff_id");

                    b.Navigation("Order");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.Member", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");

                    b.Navigation("StaffOrders");
                });

            modelBuilder.Entity("OrderAndInventory.DAL.Models.Staff", b =>
                {
                    b.Navigation("StaffOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
